# B2B SaaS Analytics Training Platform - Core Services
# This is the default minimal setup for quick deployment
# For full stack with Airflow, MLflow, and monitoring, use docker-compose.full.yml

services:
  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg15
    container_name: saas_platform_postgres
    environment:
      POSTGRES_DB: saas_platform_dev
      POSTGRES_USER: saas_user
      POSTGRES_PASSWORD: saas_secure_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saas_user -d saas_platform_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - saas_network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: saas_platform_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - saas_network

  # dbt Core for Data Transformations
  dbt-core:
    build:
      context: .
      dockerfile: docker/Dockerfile.dbt
    container_name: saas_platform_dbt_core
    environment:
      DBT_PROFILES_DIR: /opt/dbt_project
      DBT_PROJECT_DIR: /opt/dbt_project
    volumes:
      - ./dbt_project:/opt/dbt_project
      - dbt_logs:/opt/dbt_project/logs
      - dbt_target:/opt/dbt_project/target
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - saas_network
    command: bash -c "echo 'dbt-core service ready' && tail -f /dev/null"

  # Apache Superset for BI/Dashboards
  superset:
    build:
      context: ./superset
      dockerfile: Dockerfile
    container_name: saas_platform_superset
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      DATABASE_DIALECT: postgresql
      DATABASE_USER: saas_user
      DATABASE_PASSWORD: saas_secure_password_2024
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_DB: superset_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SECRET_KEY: f5d1242e5ed24c96a8c2f7830f2c9b4e
      SUPERSET_ENV: production
      PYTHONPATH: /app/pythonpath
      SUPERSET_CONFIG_PATH: /app/pythonpath/superset_config.py
    ports:
      - "8088:8088"
    volumes:
      - ./superset:/app/docker
      - superset_home:/app/superset_home
    restart: unless-stopped
    networks:
      - saas_network

  # Jupyter Lab for Data Science
  jupyter:
    build:
      context: .
      dockerfile: docker/Dockerfile.jupyter
    container_name: saas_platform_jupyter
    environment:
      JUPYTER_TOKEN: saas_ml_token_2024
      JUPYTER_ENABLE_LAB: "yes"
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: saas_user
      DB_PASSWORD: saas_secure_password_2024
      DB_NAME: saas_platform_dev
    ports:
      - "8888:8888"
    volumes:
      - ./ml:/home/jovyan/ml
      - ./dbt_project:/home/jovyan/dbt_project
      - ./edu:/home/jovyan/edu
      - ./docs:/home/jovyan/docs
      - jupyter_data:/home/jovyan/work
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - saas_network
    user: "1000:100"  # Fixes permission issues

volumes:
  postgres_data:
  redis_data:
  superset_home:
  jupyter_data:
  dbt_logs:
  dbt_target:

networks:
  saas_network:
    driver: bridge